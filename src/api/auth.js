import client from "./client";


// sending   HTTP request with the Bearer Token 
// Bearer Token is a cryptic string typically generated by the server 
// The client must send this Bearer Token in the Authorization header on every request it makes to obtain a protected resource

//......................................  Create User     .....................................................

export const createUser = async (userInfo) => {
  try {
    const { data } = await client.post("user/user-create", userInfo);
    return data;
  } catch (error) {
    // the  same json response from helper.js
    const { response } = error;
    if (response?.data) return response.data;
    return { error: error.message || error };
  }
};

//......................................  Verify User Email    .....................................................

export const verifyUserEmail = async (userInfo) => {
  try {
    const { data } = await client.post("user/verify-email", userInfo);
    return data;
  } catch (error) {
    // the  same json response from helper.js
    const { response } = error;
    if (response?.data) return response.data;
    return { error: error.message || error };
  }
};

//......................................  Sign In User     .....................................................

export const signInUser = async (userInfo) => {
  try {
    const { data } = await client.post("/user/sign-in", userInfo);
    return data;
  } catch (error) {
    // the  same json response from helper.js
    const { response } = error;
    if (response?.data) return response.data;
    return { error: error.message || error };
  }
};

//......................................  Get Is Auth     .....................................................

export const getIsAuth = async (token) => {
  try {
    const { data } = await client.get("/user/is-auth", {
      headers: {
        Authorization: "Bearer " + token,
        accept: "application/json",
      },
    });
    return data;
  } catch (error) {
    const { response } = error;
    if (response?.data) return response.data;

    return { error: error.message || error };
  }
};

//......................................  Forget Password     .....................................................

export const forgetPassword = async (email) => {
  try {
    const { data } = await client.post("/user/forgetPassword", { email });

    return data;
  } catch (error) {
    const { response } = error;
    if (response?.data) return response.data;

    return { error: error.message || error };
  }
};

//......................................  Verify Password Reset Token     .....................................................

export const verifyPasswordResetToken = async (token, userId) => {
  try {
    const { data } = await client.post("/user/verify-pass-reset-token", {
      token,
      userId,
    });
    return data;
  } catch (error) {
    const { response } = error;
    if (response?.data) return response.data;

    return { error: error.message || error };
  }
};

//......................................  Reset Password      .....................................................

export const resetPassword = async (passwordInfo) => {
  try {
    const { data } = await client.post("/user/reset-password", passwordInfo);
    return data;
  } catch (error) {
    const { response } = error;
    if (response?.data) return response.data;

    return { error: error.message || error };
  }
};

//......................................  Resend OTP     .....................................................

export const resendOTP = async (userId) => {
  try {
    const { data } = await client.post("/user/resend-otp", { userId });
    return data;
  } catch (error) {
    const { response } = error;
    if (response?.data) return response.data;

    return { error: error.message || error };
  }
};

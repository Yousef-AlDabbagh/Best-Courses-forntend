import { catchError, getToken } from "../utils/helper";
import client from "./client";




// sending   HTTP request with the Bearer Token 
// Bearer Token is a cryptic string typically generated by the server 
// The client must send this Bearer Token in the Authorization header on every request it makes to obtain a protected resource


//......................................  Create Instructor     .....................................................

export const createInstructor = async (formData) => {
  const token = getToken();
  try {
    const { data } = await client.post("/instructor/create", formData, {
      headers: {
        authorization: "Bearer " + token,
        "content-type": "multipart/form-data",
      },
    });
    return data;
  } catch (error) {
    return catchError(error);
  }
};

//......................................  Search Instructor   .....................................................

export const searchInstructor = async (query) => {
  const token = getToken();
  try {
    const { data } = await client(`/instructor/search?name=${query}`, {
      headers: {
        authorization: "Bearer " + token,
        "content-type": "multipart/form-data",
      },
    });
    return data;
  } catch (error) {
    return catchError(error);
  }
};

//......................................  Get Instructors    .....................................................

export const getInstructors = async (pageNo, limit) => {
  const token = getToken();
  try {
    const { data } = await client(
      `/instructor/instructors?pageNo=${pageNo}&limit=${limit}`,
      {
        headers: {
          authorization: "Bearer " + token,
          "content-type": "multipart/form-data",
        },
      }
    );
    return data;
  } catch (error) {
    return catchError(error);
  }
};

//......................................  Delete Instructor   .....................................................

export const deleteInstructor = async (id) => {
  const token = getToken();
  try {
    const { data } = await client.delete("/instructor/" + id, {
      headers: {
        authorization: "Bearer " + token,
      },
    });
    return data;
  } catch (error) {
    return catchError(error);
  }
};

//......................................  Update Instructor     .....................................................

export const updateInstructor = async (id, formData) => {
  const token = getToken();
  try {
    const { data } = await client.post("/instructor/update/" + id, formData, {
      headers: {
        authorization: "Bearer " + token,
        "content-type": "multipart/form-data",
      },
    });
    return data;
  } catch (error) {
    return catchError(error);
  }
};

//......................................  Get Instructor Profile    .....................................................

export const getInstructorProfile = async (id) => {
  
  try {
    const { data } = await client(`/instructor/single/${id}`);
    return data;
  } catch (error) {
    return catchError(error);
  }
};

